{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","cardsArray","map","user","i","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOA+BeA,EA3BE,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAG5B,OAEI,sBAAKC,UAAU,mDAAf,UAMO,qBAAKC,IAAI,SAASC,IAAG,+BAA2BH,EAA3B,cACxB,gCAMM,6BAAKF,IACP,4BAAIC,WCDLK,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAKZC,EAAaD,EAAOE,KAAI,SAACC,EAAMC,GACnC,OACE,cAAC,EAAD,CAEET,GAAIK,EAAOI,GAAGT,GACdF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,OAHZU,MAQX,OAAO,8BAAMH,KCJAI,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACE,qBAAKX,UAAU,MAAf,SACE,uBACEA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCQHI,EAdA,SAACC,GACd,OACsB,aAApB,CAAoB,OAClBC,MAAO,CACLC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,SAJQ,SAOjBJ,EAAMK,YCkBEC,E,kDA1BX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACGO,MAAS,CACVC,UAAU,GAHH,E,qDAQnB,SAAkBC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAS,M,oBAI5B,WAEI,OAAGG,KAAKJ,MAAMC,SAEV,yDAIGG,KAAKX,MAAMK,a,GAtBCQ,aC8GZC,G,wDAtFb,aAAe,IAAD,8BACZ,gBA8BFC,eAAiB,SAACC,GAEhB,EAAKJ,SAAS,CAAElB,YAAasB,EAAMC,OAAOC,SA/B1C,EAAKX,MAAQ,CACXnB,OAAQ,GACRM,YAAa,IAJH,E,qDAYd,WAAqB,IAAD,OAClByB,MAAM,8CAEHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAE5BF,MAAK,SAACG,GAAD,OAAW,EAAKX,SAAS,CAAExB,OAAQmC,S,oBAwB7C,WAAU,IAAD,EACuBZ,KAAKJ,MAA5BnB,EADA,EACAA,OAAQM,EADR,EACQA,YAET8B,EAAiBpC,EAAOqC,QAAO,SAACC,GACpC,OAAOA,EAAM7C,KACV8C,cACAC,SAASlC,EAAYiC,kBAoBzB,OAA0B,KAAlBvC,EAAOyC,OACb,yCAGC,sBAAK7C,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWW,aAAcgB,KAAKI,iBAE9B,cAAC,EAAD,UACA,cAAC,EAAD,UACE,cAAC,EAAD,CAAU3B,OAAQoC,e,GAvFZX,cCLHiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,8BACE,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.fc855d3d.chunk.js","sourcesContent":["import React from 'react';\n\n//First and second version\n// const Card = (props) => {\n    const Card = ({name, email, id}) => {\n    // Second version\n    // const {name, email, id} = props;\n    return(\n        \n        <div className='bg-light-green dib br3 pa3 ma2 grow bw3 shadow-5'>\n            {/* <img alt=\"robots\" src= \"https://robohash.org/test?200x200\" /> */}\n            {/* First version */}\n               {/* <img alt=\"robots\" src= {`https://robohash.org/${props.id}?200x200`} /> */}\n               \n               {/* Second version */}\n               <img alt=\"robots\" src= {`https://robohash.org/${id}?200x200`} />\n            <div>\n                {/* First version\n                <h1>{props.name}</h1>\n                <p>{props.email}</p> */}\n\n               {/* Second Version  */}\n                  <h2>{name}</h2>\n                <p>{email}</p>\n\n\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n  /*ErrorBoundry*/\n  /*if(true) {\n    throw new Error('NOOOOO')\n  }*/\n  const cardsArray = robots.map((user, i) => {\n    return (\n      <Card\n        key={i}\n        id={robots[i].id}\n        name={robots[i].name}\n        email={robots[i].email}\n      />\n    );\n  });\n\n  return <div>{cardsArray}</div>;\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchField, searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\n//using children, you can wrap components with other components\nconst Scroll = (props) => {\n  return (\n    /*props.children;*/ <div\n      style={{\n        overflowY: \"scroll\",\n        border: \"4px solid black\",\n        height: \"500px\",\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, {Component} from \"react\";\n\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n            this.state =  {\n                hasError: false\n            }\n        \n    }\n\n    componentDidCatch(error,info) {\n        this.setState({hasError:true})\n    }\n\n\n    render() {\n\n        if(this.state.hasError) {\n        return(\n            <h1>OPPPs. That is not good</h1>\n        )\n        }\n\n        return this.props.children\n    }\n}\n\n\nexport default ErrorBoundry;","import React, { Component } from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundry from \"../components/ErrorBoundry\";\nimport \"./App.css\";\n// import { robots } from \"./robots\";\n\n// Props never change, its just input we get and we never modified them, sample of props is {robots}\n//State an object that describes your application\n//The parent feeds  state in the child component and the child receives it as a property\n\n// const state = {\n//   robots: robots,\n//   searchField: \"\",\n// };\n\nclass App extends Component {\n  //With robots.txt\n  // constructor() {\n  //   super();\n  //   this.state = {\n  //     robots: robots,\n  //     searchField: \"\",\n  //   };\n  // }\n\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchField: \"\",\n    };\n\n    // console.log('constructor');\n  }\n\n  //Make request here\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      //Simplier way\n      .then((response) => response.json())\n\n      .then((users) => this.setState({ robots: users }));\n\n    //Complete way to do\n    //   .then(response => {\n    //   return response.json()\n    // })\n\n    // .then(users => {\n    //     return this.setState( {robots: users});\n    // })\n    // this.setState( {robots: robots});\n    // console.log('componentDidMount');\n  }\n\n  onSearchChange = (event) => {\n    // console.log(event.target.value);\n    this.setState({ searchField: event.target.value });\n    // const filteredRobots = this.state.robots.filter((robots) => {\n    //   return robots.name\n    //     .toLowerCase()\n    //     .includes(this.state.searchField.toLowerCase());\n    // });\n    // console.log(filteredRobots);\n  };\n  render() {\n    const {robots, searchField} = this.state;\n    //const filteredRobots = this.state.robots.filter((robot) => {\n    const filteredRobots = robots.filter((robot) => {\n      return robot.name\n        .toLowerCase()\n        .includes(searchField.toLowerCase());\n    });\n    // console.log('render');\n    //if it takes a while to load, just add loading text\n    //longer way\n    // if (robots.length === 0) {\n    //   return <h1>Loading</h1>;\n    // } else {\n    //   return (\n    //     <div className=\"tc\">\n    //       <h1 className=\"f1\">Robofriends</h1>\n    //       <SearchBox searchChange={this.onSearchChange} />\n    //       {/* <CardList robots={this.state.robots} /> */}\n    //       <Scroll>\n    //         <CardList robots={filteredRobots} />\n    //       </Scroll>\n    //     </div>\n    //   );\n    // }\n    //SIMPLE WAY\n     return !robots.length === 0 ?\n       <h1>Loading</h1>:\n    \n       (\n        <div className=\"tc\">\n          <h1 className=\"f1\">Robofriends</h1>\n          <SearchBox searchChange={this.onSearchChange} />\n          {/* <CardList robots={this.state.robots} /> */}\n          <Scroll>\n          <ErrorBoundry>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundry>\n          </Scroll>\n        </div>\n      );\n    \n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"tachyons\";\n\nReactDOM.render(\n  <div>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </div>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}